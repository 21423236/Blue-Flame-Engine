vertexShader = R"(
#version 450 core
layout(location = 0) in vec2 inPosition;
layout(location = 1) in vec4 inColor;
layout(location = 2) in vec2 inUV;
layout(location = 3) in float inRenderingType;

out vec4 fragmentColor;
out vec2 UV;
out float renderingType;

layout (std140, binding = 0) uniform shader_data
{
	mat4 buffer_modelMatrix;
	mat4 buffer_viewMatrix;
	mat4 buffer_projectionMatrix;
	vec4 cameraPos;
};

void main()
{
	gl_Position = buffer_projectionMatrix /** buffer_viewMatrix * buffer_modelMatrix **/ * vec4(inPosition.xy, 0.0f, 1.0f);
	fragmentColor = inColor;
	UV = inUV;
	renderingType = inRenderingType;
}
)";

pixelShader = R"(
#version 450 core

in vec4 fragmentColor;
in vec2 UV;
in float renderingType;

out vec4 color;

uniform sampler2D textures;

void main() 
{
	int rt = int(renderingType);

	if(rt == 0)
		color = fragmentColor;
	else if(rt == 1)
		color = fragmentColor * texture(textures, UV);
	else if(rt == 2)
		color = fragmentColor * texture(textures, UV).r;
}
)";